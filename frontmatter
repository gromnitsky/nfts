#!/usr/bin/env node

let read = require('util').promisify(require('fs').readFile)
let path = require('path')
let front_matter = require('front-matter')

read(process.argv[2], {encoding: 'utf8'})
    .then(parse(process.argv[2]))
    .then(generate_shell_code).then(print).catch( e => {
	console.error(e)
	process.exit(1)
    })

function parse(file) {
    return text => {
	let fm = front_matter(text)
	fm.file = file
	return fm
    }
}

function generate_shell_code(fm) {
    let a = {}
    for (let k of Object.keys(fm.attributes))
	a[k.toLowerCase()] = norm(fm.attributes[k])
    return [
	{ var: 'body', val: fm.body },
	{ var: 'title', val: a.title || a.subject || 'Untitled' },
	{ var: 'date', val: a.date || epoch(fm.file) },
	{ var: 'authors', val: array(a.author || a.authors, 'Anonymous') },
	{ var: 'tags',
	      val: array(a.category || a.categories || a.tags, 'untagged')
	      .map( v => v.toLowerCase()) }
    ]
}

function print(code) {
    let quote = s => "'" + s.toString().replace(/'/g, "'\\''") + "'"
    code.map( v => console.log(`${v.var}=${quote(v.val)}`))
}

function norm(v) {
    if (Array.isArray(v)) return v.map(norm).filter( v => v.length).flat()
    if (v instanceof Date) return (v.valueOf()/1000).toString()
    return /string|number/.test(typeof v) ? v.toString().trim() : ''
}
function arrarify(v) { return Array.isArray(v) ? v : norm((v ||'').split(',')) }
function array(v, def) { let a = arrarify(v); return a.length ? a : [def] }
function epoch(file) {
    let d = new Date(path.basename(file).slice(0,10) /* expect XXXX-XX-XX */)
    return (isNaN(d) ? new Date(0) : d).valueOf()/1000
}
